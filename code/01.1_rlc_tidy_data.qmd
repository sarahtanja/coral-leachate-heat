---
title: "Tidy up the data"
subtitle: "From measurements taken by a Walz Diving PAMII"
author: "Sarah Tanja"
date: "`r format(Sys.time(), '%d %B, %Y')`"  
format:
  html:
    df-print: paged
    toc: true
    toc-location: right
    smooth-scroll: true
    link-external-icon: true
    link-external-newwindow: true
    code-fold: false
    code-tools: true
    code-copy: true
    highlight-style: breeze
    code-overflow: wrap
    theme: minty
editor: 
  markdown: 
    wrap: 72
---

# Overview

Quasi dark-adapted rapid light curve analysis from measurements taken by
a Walz Diving PAMII...

# Install and load packages

```{r}
# Install packages
if ("tidyverse" %in% rownames(installed.packages()) == 'FALSE') install.packages('tidyverse')
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr')
if ("stringr" %in% rownames(installed.packages()) == 'FALSE') install.packages('stringr')

# Load packages
library(dplyr)
library(tidyverse)
library(stringr)
```

# Pull in metadata

This metadata should contain the specific information about the
treatment each specimen of *Montipora capitata* was exposed to, and the
very important `No.` column which maps to the `No.` column in the Walz
PAM output report, and allows us to link specimens to the data we
collected for them via the PAM.

We've done this consecutively and with repeated measures across 5 days.

Here we pull in the metadata for each day of rapid light curve
measurements taken prior to, and daily during, the experiment.

```{r}
metadata_0712 <- read_csv("../metadata/rlc_metadata_07122024.csv")
metadata_0714 <- read_csv("../metadata/rlc_metadata_07142024.csv")
metadata_0715 <- read_csv("../metadata/rlc_metadata_07152024.csv")
metadata_0716 <- read_csv("../metadata/rlc_metadata_07162024.csv")
metadata_0717 <- read_csv("../metadata/rlc_metadata_07172024.csv")
```

Each metadata file should have 60 observations and the nine columns
should be:

1.  date
2.  No.
3.  sample_id
4.  temp
5.  colony
6.  leachate
7.  koa_color
8.  notes
9.  species

```{r}
print(metadata_0712)
```

# Pull in data

This data is generated by the report tab in the Win-3 Control Software
of the Walz Diving PAM II. Of importance to note is that regression 1
(REG1) and regression 2 (REG2) for each light curve are listed above the
tabular light curve data.

Each .pam file can be re-opened in Win Control 3 and make sure all of
the following variables are selected in the report: Sync Date Time Type
No. 1:F 1:Fm' 1:PAR 1:Y (II) 1:ETR 1:Fo' 1:ETR-F. 1:qP 1:qN 1:qL 1:NPQ
1:Y (NO) 1:Y (NPQ) 1:Fo 1:Fm 1:Fv/Fm

```{r}
rlc_0712 <- read_csv("../pam-data/rlc_07122024.csv")
rlc_0714 <- read_csv("../pam-data/rlc_07142024.csv")
rlc_0715 <- read_csv("../pam-data/rlc_07152024.csv")
rlc_0716 <- read_csv("../pam-data/rlc_07162024.csv")
rlc_0717 <- read_csv("../pam-data/rlc_07172024.csv")
```

# Join & filter data

Join metadata to the PAM data by matching "No." in the rlc dataframe to
"No." in the corresponding rlc dataframe

```{r}
rlc_0712 <- left_join(rlc_0712, metadata_0712, by = "No.") 
rlc_0714 <- left_join(rlc_0714, metadata_0714, by = "No.") 
rlc_0715 <- left_join(rlc_0715, metadata_0715, by = "No.") 
rlc_0716 <- left_join(rlc_0716, metadata_0716, by = "No.") 
rlc_0717 <- left_join(rlc_0717, metadata_0717, by = "No.") 
```

## QAQC

sample_id list

```{r}
sample_id <- metadata_0717$sample_id
```

each should have 60 'matches' of sample ID to light curve start

```{r}
rlc_0712 %>% filter(!is.na(sample_id))
rlc_0714 %>% filter(!is.na(sample_id))
rlc_0715 %>% filter(!is.na(sample_id))
rlc_0716 %>% filter(!is.na(sample_id))
rlc_0717 %>% filter(!is.na(sample_id))
```

# Section data

## Identify start and end indices, & extract RLC's

Markers for each RLC (inclusive of regression rows)

#### Pre-exposure \| July 12th 2024

```{r}
# Identify the start and end indices (aka dataframe rows) for each RLC
start_indices <- which(rlc_0712$Sync == "LCS")-2 # here we subtract 2 'rows' from the rapid light curve start row to include REG1 and REG2
end_indices <- which(rlc_0712$Sync == "LCE")
```

Each RLC should be inclusive of the start and end markers and the
regression data. We'll use a loop to go through each start and end pair

```{r}
# Initialize a list to store the dataframes
list_rlc_0712 <- list()

# Loop through each start and end index pair
for (i in seq_along(start_indices)) {
  # Extract the chunk
  chunk <- rlc_0712[(start_indices[i]):(end_indices[i]), , drop = FALSE]
  
  # Store the dataframe in the list
  list_rlc_0712[[i]] <- chunk
}
```

#### Day 1 \| July 14th 2024

```{r}
# Identify the start and end indices (aka dataframe rows) for each RLC
start_indices <- which(rlc_0714$Sync == "LCS")-2 # here we subtract 2 'rows' from the rapid light curve start row to include REG1 and REG2
end_indices <- which(rlc_0714$Sync == "LCE")
```

```{r}
# Initialize a list to store the dataframes
list_rlc_0714 <- list()

# Loop through each start and end index pair
for (i in seq_along(start_indices)) {
  # Extract the chunk
  chunk <- rlc_0714[(start_indices[i]):(end_indices[i]), , drop = FALSE]
  
  # Store the dataframe in the list
  list_rlc_0714[[i]] <- chunk
}
```

#### Day 2 \| July 15th 2024

```{r}
# Identify the start and end indices (aka dataframe rows) for each RLC
start_indices <- which(rlc_0715$Sync == "LCS")-2 # here we subtract 2 'rows' from the rapid light curve start row to include REG1 and REG2
end_indices <- which(rlc_0715$Sync == "LCE")
```

```{r}
# Initialize a list to store the dataframes
list_rlc_0715 <- list()

# Loop through each start and end index pair
for (i in seq_along(start_indices)) {
  # Extract the chunk
  chunk <- rlc_0715[(start_indices[i]):(end_indices[i]), , drop = FALSE]
  
  # Store the dataframe in the list
  list_rlc_0715[[i]] <- chunk
}
```

#### Day 3 \| July 16th 2024

```{r}
# Identify the start and end indices (aka dataframe rows) for each RLC
start_indices <- which(rlc_0716$Sync == "LCS")-2 # here we subtract 2 'rows' from the rapid light curve start row to include REG1 and REG2
end_indices <- which(rlc_0716$Sync == "LCE")
```

```{r}
# Initialize a list to store the dataframes
list_rlc_0716 <- list()

# Loop through each start and end index pair
for (i in seq_along(start_indices)) {
  # Extract the chunk
  chunk <- rlc_0716[(start_indices[i]):(end_indices[i]), , drop = FALSE]
  
  # Store the dataframe in the list
  list_rlc_0716[[i]] <- chunk
}
```

#### Day 4 \| July 17th 2024

```{r}
# Identify the start and end indices (aka dataframe rows) for each RLC
start_indices <- which(rlc_0717$Sync == "LCS")-2 # here we subtract 2 'rows' from the rapid light curve start row to include REG1 and REG2
end_indices <- which(rlc_0717$Sync == "LCE")
```

```{r}
# Initialize a list to store the dataframes
list_rlc_0717 <- list()

# Loop through each start and end index pair
for (i in seq_along(start_indices)) {
  # Extract the chunk
  chunk <- rlc_0717[(start_indices[i]):(end_indices[i]), , drop = FALSE]
  
  # Store the dataframe in the list
  list_rlc_0717[[i]] <- chunk
}
```

## Fill in metadata to all rows

Use a loop to iterate through the list of dataframes and apply fill() to
each metadata variable we want filled in. As a reminder the metadata
variables are:

1.  **date**
2.  No.
3.  **sample_id**
4.  **temp**
5.  **colony**
6.  **leachate**
7.  **koa_color**
8.  **notes**
9.  **species**

```{r}
for (i in seq_along(list_rlc_0712)){
  list_rlc_0712[[i]] <- list_rlc_0712[[i]] %>% 
    fill(date, .direction = "up") %>% 
    fill(date, .direction = "down") %>%
    fill(sample_id, .direction = "up") %>%
    fill(sample_id, .direction = "down") %>%
    fill(temp, .direction = "up") %>% 
    fill(temp, .direction = "down") %>%
    fill(colony, .direction = "up") %>%
    fill(colony, .direction = "down") %>%
    fill(leachate, .direction = "up") %>%
    fill(leachate, .direction = "down") %>%
    fill(koa_color, .direction = "up") %>%
    fill(koa_color, .direction = "down") %>%
    fill(notes, .direction = "up") %>%
    fill(notes, .direction = "down") %>%
    fill(species, .direction = "up") %>% 
    fill(species, .direction = "down")
}
```

```{r}
for (i in seq_along(list_rlc_0714)){
  list_rlc_0714[[i]] <- list_rlc_0714[[i]] %>% 
    fill(date, .direction = "up") %>% 
    fill(date, .direction = "down") %>%
    fill(sample_id, .direction = "up") %>%
    fill(sample_id, .direction = "down") %>%
    fill(temp, .direction = "up") %>% 
    fill(temp, .direction = "down") %>%
    fill(colony, .direction = "up") %>%
    fill(colony, .direction = "down") %>%
    fill(leachate, .direction = "up") %>%
    fill(leachate, .direction = "down") %>%
    fill(koa_color, .direction = "up") %>%
    fill(koa_color, .direction = "down") %>%
    fill(notes, .direction = "up") %>%
    fill(notes, .direction = "down") %>%
    fill(species, .direction = "up") %>% 
    fill(species, .direction = "down")
}
```

```{r}
for (i in seq_along(list_rlc_0715)){
  list_rlc_0715[[i]] <- list_rlc_0715[[i]] %>% 
    fill(date, .direction = "up") %>% 
    fill(date, .direction = "down") %>%
    fill(sample_id, .direction = "up") %>%
    fill(sample_id, .direction = "down") %>%
    fill(temp, .direction = "up") %>% 
    fill(temp, .direction = "down") %>%
    fill(colony, .direction = "up") %>%
    fill(colony, .direction = "down") %>%
    fill(leachate, .direction = "up") %>%
    fill(leachate, .direction = "down") %>%
    fill(koa_color, .direction = "up") %>%
    fill(koa_color, .direction = "down") %>%
    fill(notes, .direction = "up") %>%
    fill(notes, .direction = "down") %>%
    fill(species, .direction = "up") %>% 
    fill(species, .direction = "down")
}
```

```{r}
for (i in seq_along(list_rlc_0716)){
  list_rlc_0716[[i]] <- list_rlc_0716[[i]] %>% 
    fill(date, .direction = "up") %>% 
    fill(date, .direction = "down") %>%
    fill(sample_id, .direction = "up") %>%
    fill(sample_id, .direction = "down") %>%
    fill(temp, .direction = "up") %>% 
    fill(temp, .direction = "down") %>%
    fill(colony, .direction = "up") %>%
    fill(colony, .direction = "down") %>%
    fill(leachate, .direction = "up") %>%
    fill(leachate, .direction = "down") %>%
    fill(koa_color, .direction = "up") %>%
    fill(koa_color, .direction = "down") %>%
    fill(notes, .direction = "up") %>%
    fill(notes, .direction = "down") %>%
    fill(species, .direction = "up") %>% 
    fill(species, .direction = "down")
}
```

```{r}
for (i in seq_along(list_rlc_0717)){
  list_rlc_0717[[i]] <- list_rlc_0717[[i]] %>% 
    fill(date, .direction = "up") %>% 
    fill(date, .direction = "down") %>%
    fill(sample_id, .direction = "up") %>%
    fill(sample_id, .direction = "down") %>%
    fill(temp, .direction = "up") %>% 
    fill(temp, .direction = "down") %>%
    fill(colony, .direction = "up") %>%
    fill(colony, .direction = "down") %>%
    fill(leachate, .direction = "up") %>%
    fill(leachate, .direction = "down") %>%
    fill(koa_color, .direction = "up") %>%
    fill(koa_color, .direction = "down") %>%
    fill(notes, .direction = "up") %>%
    fill(notes, .direction = "down") %>%
    fill(species, .direction = "up") %>% 
    fill(species, .direction = "down")
}
```

# Extract alpha, ETRm, & Ik values

```{r}
# Define a regex pattern to extract alpha, ETRm, and Ik values
regex <- "alpha: ([\\d.-]+), ETRm: ([\\d.-]+), Ik: ([\\d.-]+)"
```

### Pre-exposure \| regression_0712

```{r}
# Initialize a regression dataframe
regression_0712 <- data.frame()

# Extract the rows that match the pattern
for (i in seq_along(list_rlc_0712)){
  jasby_platt <- list_rlc_0712[[i]] %>%
  mutate(match = str_extract(`1:F`, regex)) %>%
  mutate(alpha = str_extract(match, "(?<=alpha: )[\\d.-]+"),
         ETRm = str_extract(match, "(?<=ETRm: )[\\d.-]+"),
         Ik = str_extract(match, "(?<=Ik: )[\\d.-]+")) %>% 
    select(Date, Time, Type, sample_id, colony, temp, koa_color, leachate,'1:F', alpha, ETRm, Ik) %>% 
    #filter(Type %in% c('REG1','REG2')) %>% 
    filter(Type %in% 'REG2') %>%
    filter(!is.na(sample_id)) %>% 
    mutate(days_of_exposure = 0) %>% 
    mutate(treatment = str_c(temp, leachate, sep = "_")) %>% 
    mutate(treatment = as.factor(treatment)) %>% 
    mutate(alpha = as.numeric(alpha)) %>% 
    mutate(ETRm = as.numeric(ETRm)) %>% 
    mutate(Ik = as.numeric(Ik))
  
  # Append the modified dataframe to the regression_0712 data frame
  regression_0712 <- bind_rows(regression_0712, jasby_platt)
}
```

### Day 1 \| regression_0714

```{r}
# Initialize a regression dataframe
regression_0714 <- data.frame()

# Extract the rows that match the pattern
for (i in seq_along(list_rlc_0714)){
  jasby_platt <- list_rlc_0714[[i]] %>%
  mutate(match = str_extract(`1:F`, regex)) %>%
  mutate(alpha = str_extract(match, "(?<=alpha: )[\\d.-]+"),
         ETRm = str_extract(match, "(?<=ETRm: )[\\d.-]+"),
         Ik = str_extract(match, "(?<=Ik: )[\\d.-]+")) %>% 
    select(Date, Time, Type, sample_id, colony, temp, koa_color, leachate,'1:F', alpha, ETRm, Ik) %>% 
    #filter(Type %in% c('REG1','REG2')) %>% 
    filter(Type %in% 'REG2') %>%
    filter(!is.na(sample_id)) %>% 
    mutate(days_of_exposure = 1) %>% 
    mutate(treatment = str_c(temp, leachate, sep = "_")) %>% 
    mutate(treatment = as.factor(treatment)) %>% 
    mutate(alpha = as.numeric(alpha)) %>% 
    mutate(ETRm = as.numeric(ETRm)) %>% 
    mutate(Ik = as.numeric(Ik))
  
  # Append the modified dataframe to the regression_0714 data frame
  regression_0714 <- bind_rows(regression_0714, jasby_platt)
}
```

### Day 2 \| regression_0715

```{r}
# Initialize a regression dataframe
regression_0715 <- data.frame()

# Extract the rows that match the pattern
for (i in seq_along(list_rlc_0715)){
  jasby_platt <- list_rlc_0715[[i]] %>%
  mutate(match = str_extract(`1:F`, regex)) %>%
  mutate(alpha = str_extract(match, "(?<=alpha: )[\\d.-]+"),
         ETRm = str_extract(match, "(?<=ETRm: )[\\d.-]+"),
         Ik = str_extract(match, "(?<=Ik: )[\\d.-]+")) %>% 
    select(Date, Time, Type, sample_id, colony, temp, koa_color, leachate,'1:F', alpha, ETRm, Ik) %>% 
    #filter(Type %in% c('REG1','REG2')) %>% 
    filter(Type %in% 'REG2') %>%
    filter(!is.na(sample_id)) %>% 
    mutate(days_of_exposure = 2) %>% 
    mutate(treatment = str_c(temp, leachate, sep = "_")) %>% 
    mutate(treatment = as.factor(treatment)) %>% 
    mutate(alpha = as.numeric(alpha)) %>% 
    mutate(ETRm = as.numeric(ETRm)) %>% 
    mutate(Ik = as.numeric(Ik))
  
  # Append the modified dataframe to the regression_0715 data frame
  regression_0715 <- bind_rows(regression_0715, jasby_platt)
}
```

### Day 3 \| regression_0716

```{r}
# Initialize a regression dataframe
regression_0716 <- data.frame()

# Extract the rows that match the pattern
for (i in seq_along(list_rlc_0716)){
  jasby_platt <- list_rlc_0716[[i]] %>%
  mutate(match = str_extract(`1:F`, regex)) %>%
  mutate(alpha = str_extract(match, "(?<=alpha: )[\\d.-]+"),
         ETRm = str_extract(match, "(?<=ETRm: )[\\d.-]+"),
         Ik = str_extract(match, "(?<=Ik: )[\\d.-]+")) %>% 
    select(Date, Time, Type, sample_id, colony, temp, koa_color, leachate,'1:F', alpha, ETRm, Ik) %>% 
    #filter(Type %in% c('REG1','REG2')) %>% 
    filter(Type %in% 'REG2') %>%
    filter(!is.na(sample_id)) %>% 
    mutate(days_of_exposure = 3) %>% 
    mutate(treatment = str_c(temp, leachate, sep = "_")) %>% 
    mutate(treatment = as.factor(treatment)) %>% 
    mutate(alpha = as.numeric(alpha)) %>% 
    mutate(ETRm = as.numeric(ETRm)) %>% 
    mutate(Ik = as.numeric(Ik))
  
  # Append the modified dataframe to the regression_0716 data frame
  regression_0716 <- bind_rows(regression_0716, jasby_platt)
}
```

### Day 4 \| regression_0717

```{r}
# Initialize a regression dataframe
regression_0717 <- data.frame()

# Extract the rows that match the pattern
for (i in seq_along(list_rlc_0717)){
  jasby_platt <- list_rlc_0717[[i]] %>%
  mutate(match = str_extract(`1:F`, regex)) %>%
  mutate(alpha = str_extract(match, "(?<=alpha: )[\\d.-]+"),
         ETRm = str_extract(match, "(?<=ETRm: )[\\d.-]+"),
         Ik = str_extract(match, "(?<=Ik: )[\\d.-]+")) %>% 
    select(Date, Time, Type, sample_id, colony, temp, koa_color, leachate,'1:F', alpha, ETRm, Ik) %>% 
    #filter(Type %in% c('REG1','REG2')) %>% 
    filter(Type %in% 'REG2') %>%
    filter(!is.na(sample_id)) %>% 
    mutate(days_of_exposure = 4) %>% 
    mutate(treatment = str_c(temp, leachate, sep = "_")) %>% 
    mutate(treatment = as.factor(treatment)) %>% 
    mutate(alpha = as.numeric(alpha)) %>% 
    mutate(ETRm = as.numeric(ETRm)) %>% 
    mutate(Ik = as.numeric(Ik))
  
  # Append the modified dataframe to the regression_0717 data frame
  regression_0717 <- bind_rows(regression_0717, jasby_platt)
}
```

# Bind regression variables (alpha, rETRm, Ik) dataset to long-form

```{r}
reg_alldays <- do.call(rbind, list(regression_0712, 
                                   regression_0714,
                                   regression_0715,
                                   regression_0716,
                                   regression_0717))
```

# Save regression dataframes as .csv

```{r}
write.csv(regression_0712, file = "../output/reg_day0.csv" )
write.csv(regression_0714, file = "../output/reg_day1.csv" )
write.csv(regression_0715, file = "../output/reg_day2.csv" )
write.csv(regression_0716, file = "../output/reg_day3.csv" )
write.csv(regression_0717, file = "../output/reg_day4.csv" )
write.csv(reg_alldays, file = "../output/reg_alldays.csv")
```

::: callout-important
Tidy up Fv/Fm data from dark-adapted measurements in
`01.2_fvfm_tidy_data.qmd`.

Proceed with analysis of calculated RLC regression variables from Jasby
& Platt (1976) (rERTm, Ik, Alpha) and dark adapted quantum yield (Fv/Fm)
by running two-way anovas and doing initial data visualization in
`02_anovas.qmd`
:::
